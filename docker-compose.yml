version: "3.8"

networks:
  mynetwork:
    driver: bridge
  
volumes:
  postgres_db:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /Users/ael-beka/tr_last/data/databases
  nginx:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /Users/ael-beka/tr_last/data/frontend
  Django:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /Users/ael-beka/tr_last/data/backend
  HashiCorps:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /Users/ael-beka/tr_last/data/HashiCorps-Vault

services:

  postgres_db:
    image: postgres:latest
    container_name: postgresdb
    env_file:
    - ./.env
    ports:
    - 5432:5432
    volumes:
      - postgres_db:/var/lib/postgresql/data
    restart: always
    networks:
      - mynetwork

  django:
    container_name: django
    depends_on:
      - postgres_db
      - redis
    build:
      context: ./Django
      dockerfile: Django.dockerfile
    ports:
      - 8000:8000
    volumes:
      - Django:/usr/src/app:rw
    restart: always
    networks:
      - mynetwork

  nginx:
    container_name: nginx
    build:
      context: ./nginx
      dockerfile: nginx.dockerfile
    ports:
      - 443:443
    depends_on:
      - django
    volumes:
      - nginx:/usr/share/nginx/html:rw
    restart: always
    networks:
      - mynetwork

  redis:
    container_name: redis
    build:
      context: ./redis
      dockerfile: redis.dockerfile
    restart: always
    networks:
      - mynetwork

  pgadmin:
    container_name: pdadmin
    build:
      context: ./pgadmin
      dockerfile: pgadmin.dockerfile
    env_file:
      - ./.env
    restart: always
    ports:
      - 5050:80
    networks:
      - mynetwork
  
  hashicorps:
    container_name: hashicorps-vault
    build:
      context: ./hashi
      dockerfile: hashi.dockerfile
    cap_add:
      - IPC_LOCK
    restart: always
    ports:
      - 8200:8200
    networks:
      - mynetwork